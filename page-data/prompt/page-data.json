{"componentChunkName":"component---src-templates-blog-post-js","path":"/prompt/","result":{"data":{"site":{"siteMetadata":{"title":"samya-ak"}},"markdownRemark":{"id":"6ebce134-1f04-57ad-9042-d9f709cac4be","excerpt":"Scenario If the description made you more confused about what this is actually about, here’s a flowchart\ndiagram for you: Usecase You’re trying to create a…","html":"<h4>Scenario</h4>\n<p>If the description made you more confused about what this is actually about, here’s a flowchart\ndiagram for you:</p>\n<div class=\"gatsby-highlight\" data-language=\"mermaid\"><pre class=\"language-mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> TD\n    id1<span class=\"token text string\">(Check if prompt needs to be shown via API call)</span>\n    <span class=\"token arrow operator\">--></span> id2<span class=\"token text string\">{Prompt shown?}</span>\n    id2 <span class=\"token arrow operator\">--></span><span class=\"token label property\">|Yes|</span> id3<span class=\"token text string\">{Show prompt with Yes/No buttons}</span>\n    id2 <span class=\"token arrow operator\">--></span><span class=\"token label property\">|No|</span> id4<span class=\"token text string\">(Make 2nd API call)</span>\n    id3 <span class=\"token arrow operator\">--></span><span class=\"token label property\">|Yes|</span> id5<span class=\"token text string\">(Make 2nd API call)</span>\n    id3 <span class=\"token arrow operator\">--></span><span class=\"token label property\">|No|</span> id6<span class=\"token text string\">(Close the prompt)</span></code></pre></div>\n<h4>Usecase</h4>\n<p>You’re trying to create a Company.If a company name already exists, users should be warned that\nthe company name already exists and do they really want to proceed with the same name. Company won’t be created\nif user chooses to cancel the prompt but, company with same name will be created if user chooses to proceed.</p>\n<h4>Implementation</h4>\n<p>Let’s look at some react code to see how you might go on implementing this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>createCompanyResolver<span class=\"token punctuation\">,</span> setCreateCompanyResolver<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> boolean <span class=\"token operator\">|</span> PromiseLike<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>boolean</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">) => void);\n  }>(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">);</span></code></pre></div>\n<p>Here, <code class=\"language-text\">createCompanyResolver</code> is a state that will be used to resolve the promise that will be created when the prompt is shown.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> exists <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">checkCompanyNameExists</span><span class=\"token punctuation\">(</span>companyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Show prompt with warning</span>\n        <span class=\"token operator\">...</span>\n\n        <span class=\"token keyword\">const</span> createCompany <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>boolean</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">((resolve) => </span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setCreateCompanyResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> resolve <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">);\n\n        // Await for user to confirm if they want to create company\n        const shouldCreateCompany = await createCompany;\n        if (!shouldCreateCompany) </span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    }\n}</span></code></pre></div>\n<p>The value of <code class=\"language-text\">createCompany</code> will be resolved based on whether the user chooses to proceed (true) or cancel(false) the prompt.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WarningModal</span></span>\n        <span class=\"token attr-name\">...</span>\n        <span class=\"token attr-name\">onUserAction</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">proceed</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>createCompanyResolver<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                createCompanyResolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>proceed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">...</span>\n    <span class=\"token punctuation\">/></span></span></code></pre></div>","frontmatter":{"title":"User action in between API calls","date":"August 03, 2024","description":"You need to show a prompt depending on an API call. Depending on the user's action, you need to make another subsequent API call"}},"previous":{"fields":{"slug":"/rate-limiter/"},"frontmatter":{"title":"Designing a bursty rate limiter"}},"next":null},"pageContext":{"id":"6ebce134-1f04-57ad-9042-d9f709cac4be","previousPostId":"c52a5c32-a848-5dec-9314-c329cb3e00e0","nextPostId":null}},"staticQueryHashes":["230163734","3589320610","754622331"]}