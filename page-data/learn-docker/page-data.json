{"componentChunkName":"component---src-templates-blog-post-js","path":"/learn-docker/","result":{"data":{"site":{"siteMetadata":{"title":"samya-ak"}},"markdownRemark":{"id":"dc70255b-b139-5bd0-b561-a224e7e58f74","excerpt":"Dockerfile A Dockerfile is a text file that contains instructions for building a Docker image. It specifies the base image to use, as well as any dependencies…","html":"<h4>Dockerfile</h4>\n<p>A Dockerfile is a text file that contains instructions for building a Docker image. It specifies the base image to use, as well as any dependencies, packages, and configurations that are needed for the image to run properly.</p>\n<h4>Volume</h4>\n<p>Volume is a persistent storage location that is outside the default Union File System of a container. It can be used to share files between the host file system and the container (Bind mount volume), or to allow containers to share data with each other. Volumes are also useful for storing data that needs to persist even when the container is no longer running, such as logs or database data (named volumes).</p>\n<h4>Docker Compose</h4>\n<p>Docker Compose is a tool for defining and running multi-container Docker applications. It allows you to define the services that make up your application in a single YAML file, and then start and stop all of them with a single command.</p>\n<p>A Docker Compose file is a YAML file that defines how Docker containers should be configured and run. It specifies the services that make up your application, as well as any volumes, networks, and other resources that they need.</p>\n<h4>From Dockerfile to Image to Container</h4>\n<p>It all starts with <strong>Dockerfile</strong> that has instructions on how to build a specific <strong>Docker image</strong>. <strong>Docker image</strong> is an immutable file that contains source code, dependencies and tools needed to run an application. <code class=\"language-text\">docker build</code> creates image from Dockerfile. This image is then used as template to run an application in an isolated environment called <strong>container</strong>. <code class=\"language-text\">docker create</code> can be used to create a new container from an image.</p>\n<ul>\n<li><code class=\"language-text\">docker create</code> : creates a fresh new container but doesn’t run it immediately</li>\n<li><code class=\"language-text\">docker start</code> : starts any stopped container</li>\n<li><code class=\"language-text\">docker run</code> : creates and starts a new container immediately. It also can pull an image from Docker Hub if it doesn’t find the mentioned image on your system</li>\n</ul>\n<h4>Common CLI commands</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> build <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># list docker images</span>\n<span class=\"token function\">docker</span> image <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># remove the specific docker image</span>\n<span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>image id<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># build an image with name</span>\n<span class=\"token function\">docker</span> build -t <span class=\"token operator\">&lt;</span>image name<span class=\"token operator\">></span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># build a container with a custom name using an image in detached mode using binded host directory</span>\n<span class=\"token comment\"># docker run -v $(pwd):/app -v /app/node_modules --env PORT=4000 -p 3000:4000 -d --name node-app node-app-image</span>\n<span class=\"token comment\"># ro : readonly - you dont want containers creating files in your host directory</span>\n<span class=\"token comment\"># in case you have multiple environment variables, you can use --env-file &lt;env file dir> option instead of --env multiple times</span>\n<span class=\"token function\">docker</span> run -v <span class=\"token operator\">&lt;</span>path to folder on <span class=\"token function\">host</span> machine<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>path to folder on container<span class=\"token operator\">></span>:ro -v <span class=\"token operator\">&lt;</span>path to files/folder you dont wanna <span class=\"token function\">sync</span> with <span class=\"token function\">host</span> folder<span class=\"token operator\">></span> --env <span class=\"token operator\">&lt;</span>env var key<span class=\"token operator\">>=</span><span class=\"token operator\">&lt;</span>env var value<span class=\"token operator\">></span> -p <span class=\"token operator\">&lt;</span>host machine port<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>container port<span class=\"token operator\">></span> -d --name <span class=\"token operator\">&lt;</span>container name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>image name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># show running container processes</span>\n<span class=\"token comment\"># -a : show all containers - started or stopped</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token punctuation\">[</span>-a<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># delete a running container</span>\n<span class=\"token comment\"># -f : force delete</span>\n<span class=\"token comment\"># -v : delete associated volumes as well</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>container name<span class=\"token operator\">></span> -fv\n\n<span class=\"token comment\"># login to docker container in interactive mode</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it <span class=\"token operator\">&lt;</span>container name<span class=\"token operator\">></span> <span class=\"token function\">bash</span>\n\n<span class=\"token comment\"># show logs of a container</span>\n<span class=\"token function\">docker</span> logs <span class=\"token operator\">&lt;</span>container name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># list volumes</span>\n<span class=\"token function\">docker</span> volume <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># remove volume by its name</span>\n<span class=\"token function\">docker</span> volume <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>volume name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># remove all unnecessary volumes</span>\n<span class=\"token function\">docker</span> volume prune\n\n<span class=\"token comment\"># start containers from docker compose file</span>\n<span class=\"token comment\"># -d : detached mode</span>\n<span class=\"token comment\"># --build : build images before starting containers</span>\n<span class=\"token function\">docker-compose</span> up -d --build\n\n<span class=\"token comment\"># stop containers from docker compose file</span>\n<span class=\"token comment\"># -v : delete unnecessary volumes that docker-compose created</span>\n<span class=\"token comment\"># -v flag deletes named volumes as well, so refrain from using it in case of dbs</span>\n<span class=\"token function\">docker-compose</span> down -v\n\n<span class=\"token comment\"># start containers using multiple docker compose files. files that come later overrides the</span>\n<span class=\"token comment\"># common config from initial files</span>\n<span class=\"token function\">docker-compose</span> -f docker-compose.yml -f docker-compose.dev.yml up -d\n\n<span class=\"token comment\"># directly login to service like mongo</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it <span class=\"token operator\">&lt;</span>container name<span class=\"token operator\">></span> mongo -u <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span> -p <span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># get info like network about container</span>\n<span class=\"token function\">docker</span> inspect <span class=\"token operator\">&lt;</span>container name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># list networks</span>\n<span class=\"token function\">docker</span> network <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># run specific container/service but ignore its dependencies</span>\n<span class=\"token function\">docker-compose</span> -f <span class=\"token operator\">&lt;</span>docker compose yaml file<span class=\"token operator\">></span> up -d --no-deps <span class=\"token operator\">&lt;</span>service name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># run duplicate containers</span>\n<span class=\"token function\">docker-compose</span> -f <span class=\"token operator\">&lt;</span>docker compose file<span class=\"token operator\">></span> up -d --scale <span class=\"token operator\">&lt;</span>service name<span class=\"token operator\">>=</span><span class=\"token operator\">&lt;</span>number of instances<span class=\"token operator\">></span></code></pre></div>\n<h4>Reference</h4>\n<ul>\n<li><a href=\"https://github.com/samya-ak/learn-docker\">repo</a></li>\n</ul>","frontmatter":{"title":"Learn Docker","date":"January 05, 2023","description":"Get started with docker"}},"previous":{"fields":{"slug":"/tmux/"},"frontmatter":{"title":"tmux"}},"next":{"fields":{"slug":"/oop-in-go/"},"frontmatter":{"title":"From OOP to Go"}}},"pageContext":{"id":"dc70255b-b139-5bd0-b561-a224e7e58f74","previousPostId":"52d0de09-067e-54ce-93de-c3b63f0a676e","nextPostId":"4280fd07-230d-5c5f-a118-75bee4d8fe62"}},"staticQueryHashes":["230163734","3589320610","754622331"]}