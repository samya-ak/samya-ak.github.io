{"componentChunkName":"component---src-templates-blog-post-js","path":"/amend-commit/","result":{"data":{"site":{"siteMetadata":{"title":"samya-ak"}},"markdownRemark":{"id":"5fa8998b-0f29-5838-bd75-d23783915f18","excerpt":"Premise If you wanted to amend the latest commit, you would just do  to already staged files.\nBut what if you want to ammend a commit that is not the latest one…","html":"<h4>Premise</h4>\n<p>If you wanted to amend the latest commit, you would just do <code class=\"language-text\">git commit --amend</code> to already staged files.\nBut what if you want to ammend a commit that is not the latest one? Read on …</p>\n<h4>git rebase, what’s that?</h4>\n<p>Personally, I believe interactive rebase is the closest thing to time travel we got, because it lets you change history, commit history.\nWhen you run something like <code class=\"language-text\">git rebase &lt;commit-hash></code>, you’re telling git to move the entire commit history of your branch to that specific commit.\nWe’ll use this idea to rewrite commit history.</p>\n<h3>Interactive rebase</h3>\n<p>First of all we need to find list of commits in our history log, then decide which commit we want to edit. Let’s say we run command <code class=\"language-text\">git log</code> and get following list of commits.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- fourth commit (HEAD->main)\n- third commit\n- second commit\n- first commit</code></pre></div>\n<p>Now, we decide that we want to amend second commit. For that, we’ll run the command <code class=\"language-text\">git rebase -i HEAD~3</code>. Here, <code class=\"language-text\">3</code> is the number of commits we want to go back from current HEAD.\nThis will open up an editor with all the commits back up to n number of commits from HEAD like following</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pick f9f850b second commit\npick c2383b3 third commit\npick 0f7aa04 fourth commit</code></pre></div>\n<p>We can do lot of things from this editor, but for now, we’ll only focus on editing the second commit. To do that, let’s change <code class=\"language-text\">pick</code> of <code class=\"language-text\">second commit</code> to <code class=\"language-text\">edit</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">edit f9f850b second commit\npick c2383b3 third commit\npick 0f7aa04 fourth commit</code></pre></div>\n<p>Then save and close the editor. <code class=\"language-text\">:wq</code> in vim.</p>\n<p>If you see the <code class=\"language-text\">git log</code> now, voila you’ve travelled to <code class=\"language-text\">second commit</code>. Now you can make all the changes you want in <code class=\"language-text\">second commit</code>! Kidding!!\nYou can add new things as much as you want, but if you happen to change something that is already present in <code class=\"language-text\">second commit</code> and the commits that come after it,\nbe ready to face the ripple effect of time travel - Conflict!</p>\n<p>Assuming you’ve added your changes, now you need to stage the changes with <code class=\"language-text\">git add</code> command then with another command <code class=\"language-text\">git rebase --continue</code>. If everything went as expected,\nyou’ve successfully amended the <code class=\"language-text\">second commit</code>.</p>\n<h4>Pushing the changes</h4>\n<p>Since we’ve changed the commit history, there’s mismatch of history between remote and our local copy. The only solution now is to replace the entire remote branche’s history with the one\nfrom our local copy. To do that, you might be tempted to use the command <code class=\"language-text\">git push origin &lt;branch> -f</code>. But, Wait!</p>\n<p>Let’s say you and one of your colleague are working on the same branch. And, your colleague just added some new changes - <code class=\"language-text\">fifth commit</code>. You’re not aware about it. You just changed the entire history\nof the branch you both are currently working on and used the command <code class=\"language-text\">git push origin &lt;branch> -f</code>. Since your local copy of the branch doesn’t have <code class=\"language-text\">fifth commit</code> and you force pushed it to the remote, you\nend up deleting all the work done by your colleague. To prevent this, you should use the command <code class=\"language-text\">git push origin &lt;branch> --force-with-lease</code>. This command won’t let you force push your changes if there’s already\nsome commits in the remote.</p>","frontmatter":{"title":"Amend an old commit in git","date":"May 30, 2022","description":"Use git rebase to amend an old commit"}},"previous":{"fields":{"slug":"/insert-or-update/"},"frontmatter":{"title":"Insert a document or Update Specific field"}},"next":{"fields":{"slug":"/tmux/"},"frontmatter":{"title":"tmux"}}},"pageContext":{"id":"5fa8998b-0f29-5838-bd75-d23783915f18","previousPostId":"508896c6-0e13-5267-b93c-65e208acb345","nextPostId":"52d0de09-067e-54ce-93de-c3b63f0a676e"}},"staticQueryHashes":["230163734","3589320610","754622331"]}