{"componentChunkName":"component---src-templates-blog-post-js","path":"/keycloak-customization/","result":{"data":{"site":{"siteMetadata":{"title":"samya-ak"}},"markdownRemark":{"id":"1e3041cc-7233-5b53-9c57-48917d132f5f","excerpt":"Reference keycloak customization Prerequisites Docker Keycloak localization Description This doc talks about how we can run  project in a docker container and…","html":"<h4>Reference</h4>\n<p><a href=\"https://github.com/samya-ak/keycloak-customization\">keycloak customization</a></p>\n<h4>Prerequisites</h4>\n<ul>\n<li>Docker</li>\n</ul>\n<h3>Keycloak localization</h3>\n<h4>Description</h4>\n<p>This doc talks about how we can run <code class=\"language-text\">keycloak</code> project in a docker container and add your custom themes to extend existing languages for localization, change stylesheets for existing keycloak pages etc. First thing that we need to understand is that, we will be copying our <code class=\"language-text\">custom-theme</code> in the <code class=\"language-text\">themes</code> directory of existing <code class=\"language-text\">keycloak</code> image using <code class=\"language-text\">Dockerfile</code>. The name of the directory becomes the name of the theme, <code class=\"language-text\">custom-theme</code> in our case.</p>\n<h4>Procedure</h4>\n<ol>\n<li>To create a theme called <code class=\"language-text\">custom-theme</code>, create the directory <code class=\"language-text\">themes/custom-theme</code>. Inside the theme directory, create a directory for each of the types your theme is going to provide.\nFor example, to add the login type to the custom-theme theme, create the directory <code class=\"language-text\">themes/custom-theme/login</code>.\nFor each type create a file <code class=\"language-text\">theme.properties</code> which allows setting some configuration for the theme.\nFor example, to configure the theme <code class=\"language-text\">themes/custom-theme/login</code> to extend the base theme and import some common resources, create the file <code class=\"language-text\">themes/mytheme/login/theme.properties</code> with following contents:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    parent=base\n    import=common/keycloak</code></pre></div>\n<ol start=\"2\">\n<li>\n<p>Create the file <code class=\"language-text\">&lt;THEME TYPE>/messages/messages_&lt;LOCALE>.properties</code> in the directory of your theme.</p>\n</li>\n<li>\n<p>Add this file to the locales property in <THEME TYPE>/theme.properties. For a language to be available to users the realms login, account and email, the theme has to support the language, so you need to add your language for those theme types.\nFor example, to add Nepali translations to the <code class=\"language-text\">custom-theme</code> theme create the file <code class=\"language-text\">themes/custom-theme/login/messages/messages_np.properties</code> with the following content. If you omit a translation for messages, they will use English.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    usernameOrEmail=इमेल\n    password=पस्स्वोर्ड</code></pre></div>\n<ol start=\"4\">\n<li>Edit themes/mytheme/login/theme.properties and add:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    locales=en,np</code></pre></div>\n<ol start=\"5\">\n<li>\n<p>Add the same for the <code class=\"language-text\">account</code> and <code class=\"language-text\">email</code> theme types. To do this create <code class=\"language-text\">themes/custom-theme/account/messages/messages_no.properties</code> and <code class=\"language-text\">themes/custom-theme/email/messages/messages_no.properties</code>. Leaving these files empty will result in the English messages being used.</p>\n</li>\n<li>\n<p>Copy <code class=\"language-text\">themes/custom-theme/login/theme.properties</code> to <code class=\"language-text\">themes/custom-theme/account/theme.properties</code> and <code class=\"language-text\">themes/custom-theme/email/theme.properties</code>.</p>\n</li>\n<li>\n<p>Add a translation for the language selector. This is done by adding a message to the English translation. To do this add the following to <code class=\"language-text\">themes/custom-theme/account/messages/messages_en.properties</code> and <code class=\"language-text\">themes/custom-theme/login/messages/messages_en.properties</code>:</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    locale_np=नेपाली</code></pre></div>\n<ol start=\"8\">\n<li>Create a Dockerfile that extends existing keycloak project’s image. There’s a step that copies <code class=\"language-text\">custom-theme</code> to the working directory of keycloak</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> quay.io/keycloak/keycloak:latest <span class=\"token keyword\">as</span> builder</span>\n\n<span class=\"token comment\"># Enable health and metrics support</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> KC_HEALTH_ENABLED=true</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> KC_METRICS_ENABLED=true</span>\n\n<span class=\"token comment\"># Configure a database vendor</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> KC_DB=postgres</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /opt/keycloak</span>\n<span class=\"token comment\"># for demonstration purposes only, please make sure to use proper certificates in production instead</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> keytool -genkeypair -storepass password -storetype PKCS12 -keyalg RSA -keysize 2048 -dname <span class=\"token string\">\"CN=server\"</span> -alias server -ext <span class=\"token string\">\"SAN:c=DNS:localhost,IP:127.0.0.1\"</span> -keystore conf/server.keystore</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> /opt/keycloak/bin/kc.sh build</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> quay.io/keycloak/keycloak:latest</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /opt/keycloak/ /opt/keycloak/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> custom-theme /opt/keycloak/themes/custom-theme</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"/opt/keycloak/bin/kc.sh\"</span>]</span></code></pre></div>\n<ol start=\"9\">\n<li>Use this Dockerfile in <code class=\"language-text\">docker-compose.yml</code> with a service called keycloak like</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.7\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">postgres</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> postgres_container\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres<span class=\"token punctuation\">:</span><span class=\"token number\">15</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">POSTGRES_USER</span><span class=\"token punctuation\">:</span> postgres\n      <span class=\"token key atrule\">POSTGRES_PASSWORD</span><span class=\"token punctuation\">:</span> postgres\n      <span class=\"token key atrule\">POSTGRES_DB</span><span class=\"token punctuation\">:</span> keycloak\n      <span class=\"token key atrule\">PGDATA</span><span class=\"token punctuation\">:</span> /data/postgres\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> postgres<span class=\"token punctuation\">:</span>/data/postgres\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"5432:5432\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n\n  <span class=\"token key atrule\">keycloak</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> Dockerfile\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">KC_DB</span><span class=\"token punctuation\">:</span> postgres\n      <span class=\"token key atrule\">KC_DB_URL</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>postgresql<span class=\"token punctuation\">:</span>//postgres/keycloak\n      <span class=\"token key atrule\">KC_DB_USERNAME</span><span class=\"token punctuation\">:</span> postgres\n      <span class=\"token key atrule\">KC_DB_PASSWORD</span><span class=\"token punctuation\">:</span> postgres\n      <span class=\"token key atrule\">KEYCLOAK_ADMIN</span><span class=\"token punctuation\">:</span> admin\n      <span class=\"token key atrule\">KEYCLOAK_ADMIN_PASSWORD</span><span class=\"token punctuation\">:</span> admin\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 7777<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> postgres\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> start<span class=\"token punctuation\">-</span>dev\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>spi<span class=\"token punctuation\">-</span>theme<span class=\"token punctuation\">-</span>static<span class=\"token punctuation\">-</span>max<span class=\"token punctuation\">-</span>age=<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>spi<span class=\"token punctuation\">-</span>theme<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>themes=false\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>spi<span class=\"token punctuation\">-</span>theme<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>templates=false\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  postgres<span class=\"token punctuation\">:</span></code></pre></div>\n<ol start=\"10\">\n<li>Finally run <code class=\"language-text\">docker compose up --build</code> to start the keycloak server</li>\n</ol>\n<h4>References</h4>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/tree/main/themes/src/main/resources/theme/base\">Keycloak base theme source code</a></li>\n<li><a href=\"https://www.keycloak.org/docs/23.0.6/server_development/#adding-a-language-to-a-realm\">Adding a language to a realm</a></li>\n<li><a href=\"https://www.keycloak.org/docs/23.0.6/server_development/#add-a-stylesheet-to-a-theme\">Adding a stylesheet to a theme</a></li>\n<li><a href=\"https://github.com/samya-ak/keycloak-localization/tree/main\">Final result of above instructions</a></li>\n</ul>\n<h3>Keycloak emails</h3>\n<h4>Description</h4>\n<blockquote>\n<p>Keycloak sends emails to users</p>\n<ul>\n<li>to verify their email address</li>\n<li>when they forget their passwords</li>\n<li>when an admin needs to receive notifications about a server event</li>\n</ul>\n</blockquote>\n<p>We can setup SMTP in keycloak by following instructions from <a href=\"https://wjw465150.gitbooks.io/keycloak-documentation/content/server_admin/topics/realms/email.html\">here</a>.</p>\n<blockquote>\n<p>Keycloak doesn’t send out mails immediately when a user is created. And also this depends if you have the email verification enabled. You can do this in two ways: In Realm Settings → Login → Verify Email or with the Required Action “Verify Email”.\nBoth approaches will send an email to the user, if the user is not marked as “email verified” and is just trying to login. Required actions are fired at the end of an authentication flow and must be successfully solved, before.a user is completely authenticated.\nKeycloak has no thing like “invitation” which will be sent when the user has been created and tell the user “hey, you have just been created, please do… whatever you expect”\nBut you can use the admin API right after creating a user to send a “credential reset” email with several required actions in it.</p>\n<ul>\n<li>Mr. KeyCloak <a href=\"https://keycloak.discourse.group/t/does-creating-a-new-user-via-api-send-a-confirmation-email/20646/4\">here</a></li>\n</ul>\n</blockquote>\n<h4>Customizing email templates</h4>\n<p>To edit the subject and contents for emails, for example email verification email, add a message bundle to the email type of your theme. There are three messages for each email. One for the subject, one for the plain text body and one for the html body.</p>\n<p>To see all emails available take a look at <a href=\"https://github.com/keycloak/keycloak/blob/main/themes/src/main/resources/theme/base/email/messages/messages_en.properties\">here</a>.</p>\n<p>For example to change the email verification email for the <code class=\"language-text\">custom-them</code> theme create <code class=\"language-text\">themes/custom-theme/email/messages/messages_en.properties</code> with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">emailVerificationSubject=Verify email custom subject\nemailVerificationBody=Someone has created a {2} account with this email address. If this was you, click the link below to verify your email address\\n\\n{0}\\n\\nThis link will expire within {3}.\\n\\nIf you didn''t create this account, just ignore this message.\nemailVerificationBodyHtml=&lt;p>Someone has created a {2} account with this email address. If this was you, click the link below to verify your email address&lt;/p>&lt;p>&lt;a href=\"{0}\">Link to e-mail address verification&lt;/a>&lt;/p>&lt;p>This link will expire within {3}.&lt;/p>&lt;p>If you didn''t create this account, just ignore this message lol.&lt;/p></code></pre></div>\n<h4>Reference</h4>\n<p><a href=\"https://www.keycloak.org/docs/23.0.6/server_development/#emails\">Emails docs</a></p>\n<h3>Database configuration</h3>\n<h4>Description</h4>\n<p>If you run keycloak in docker with command like</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run -p <span class=\"token number\">8080</span>:8080 -e <span class=\"token assign-left variable\">KEYCLOAK_ADMIN</span><span class=\"token operator\">=</span>admin -e <span class=\"token assign-left variable\">KEYCLOAK_ADMIN_PASSWORD</span><span class=\"token operator\">=</span>admin quay.io/keycloak/keycloak:23.0.6 start-dev</code></pre></div>\n<p>it uses default database.</p>\n<blockquote>\n<p>By default, the server uses the dev-file database. This is the default database that the server will use to persist data and only exists for development use-cases.\nThe dev-file database is not suitable for production use-cases, and must be replaced before deploying to production.</p>\n</blockquote>\n<p>Here, dev-file denotes the use of the <a href=\"https://www.h2database.com/html/main.html\">H2</a> db internally. So, data will not persist on every restart of keycloak server.</p>\n<p>For more fluent developer experience, we can use database like postgres to persist data. We can do this by using configuration like:</p>\n<div class=\"gatsby-highlight\" data-language=\"docker-compose\"><pre class=\"language-docker-compose\"><code class=\"language-docker-compose\">  keycloak:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    environment:\n      KC_DB: postgres\n      KC_DB_URL: jdbc:postgresql://postgres/keycloak\n      KC_DB_USERNAME: postgres\n      KC_DB_PASSWORD: postgres\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    ports:\n      - 7777:8080\n    depends_on:\n      - postgres\n    command:\n      - start-dev\n      - --spi-theme-static-max-age=-1\n      - --spi-theme-cache-themes=false\n      - --spi-theme-cache-templates=false</code></pre></div>\n<h5>In-built supported databases and their tested versions.</h5>\n<table>\n<thead>\n<tr>\n<th>Database</th>\n<th>Option value</th>\n<th>Tested version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MariaDB Server</td>\n<td>mariadb</td>\n<td>10.11</td>\n</tr>\n<tr>\n<td>Microsoft SQL Server</td>\n<td>mssql</td>\n<td>2022</td>\n</tr>\n<tr>\n<td>MySQL</td>\n<td>mysql</td>\n<td>8.0</td>\n</tr>\n<tr>\n<td>Oracle Database</td>\n<td>oracle</td>\n<td>19.3</td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td>postgres</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h5>Mongo Support</h5>\n<p>The latest version of keycloak doesn’t support nosql databases. You can read more about it <a href=\"https://lists.jboss.org/pipermail/keycloak-user/2017-February/009417.html\">here</a>.</p>\n<h5>Should you share Keycloak db schema with your application’s db schema?</h5>\n<p>Technically you can but, it “produces very tight coupling between the app and the authentication provider while they are intended to be two very distinct instances.”\nIdeally, you would use a single db but with different schemas for keycloak and your application.</p>\n<h4>References</h4>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/issues/22231#issuecomment-1689699362\">On H2 db</a></li>\n<li><a href=\"https://www.keycloak.org/server/db\">Configuring the database</a></li>\n<li><a href=\"https://keycloak.discourse.group/t/keycloak-db-or-using-custom-db-when-creating-project-from-scratch/23241/4\">Sharing keycloak and application db</a></li>\n<li><a href=\"https://keycloak.discourse.group/t/risks-of-running-a-shared-database-between-keycloak-and-application-s/7344/2\">Sharing keycloak and application db2</a></li>\n</ul>","frontmatter":{"title":"Customizing keycloak","date":"February 20, 2024","description":"Customize keycloak's theme and email templates"}},"previous":{"fields":{"slug":"/stow/"},"frontmatter":{"title":"Manage dotfiles using stow"}},"next":{"fields":{"slug":"/insert-or-update/"},"frontmatter":{"title":"Insert a document or Update Specific field"}}},"pageContext":{"id":"1e3041cc-7233-5b53-9c57-48917d132f5f","previousPostId":"53619caa-b9c0-526b-bc12-bd18d8cb24ab","nextPostId":"508896c6-0e13-5267-b93c-65e208acb345"}},"staticQueryHashes":["230163734","3589320610","754622331"]}