{"componentChunkName":"component---src-templates-blog-post-js","path":"/oop-in-go/","result":{"data":{"site":{"siteMetadata":{"title":"samya-ak"}},"markdownRemark":{"id":"4280fd07-230d-5c5f-a118-75bee4d8fe62","excerpt":"Creating an Object You create an object in go by defining a struct type and creating an instance of that struct. Alternative ways to create an instance: Or…","html":"<h4>Creating an Object</h4>\n<p>You create an object in go by defining a struct type and creating an instance of that struct.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Name <span class=\"token builtin\">string</span>\n    Age <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    p <span class=\"token operator\">:=</span> Person<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Alternative ways to create an instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">p <span class=\"token operator\">:=</span> Person<span class=\"token punctuation\">{</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or,</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">p <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This creates a pointer to a new instance of the struct and initialises all fields to their zero or default value. Equivalent to:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">p <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Person<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Example of default values for different data types:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">int : 0\nfloat : 0.0\nbool: false\nstring: \"\"\nstruct: all its fields are set to their zero values\npointer: nil\nslice: nil\nmap: nil\nchan: nil</code></pre></div>\n<h4>Encapsulation</h4>\n<p>Bundling of data along with its methods in a single unit to restrict direct access of fields and methods is encapsulation.\nEncapsulation is achieved by using access modifiers such as “private”, “protected”, and “public” to control access to the\nfields and methods of a class in pure OOP language like Java. It is slightly different in go.</p>\n<p>By convention, fields and methods that start with an uppercase letter are considered public and can be\naccessed by any code, while fields and methods that start with a lowercase letter are considered private\nand can only be accessed within the same package. It’s worth noting that this is a convention and is not enforced\nby the Go compiler.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> BankAccount <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\taccountNumber <span class=\"token builtin\">string</span>\n\tbalance       <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>BankAccount<span class=\"token punctuation\">)</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span>amount <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">+=</span> amount\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>BankAccount<span class=\"token punctuation\">)</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span>amount <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> b<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">>=</span> amount <span class=\"token punctuation\">{</span>\n\t\tb<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> amount\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>BankAccount<span class=\"token punctuation\">)</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>balance\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Reference:</h5>\n<ul>\n<li><a href=\"https://gobyexample.com/methods\">Methods and Receivers</a></li>\n</ul>\n<h4>Abstraction</h4>\n<p>Hiding unnecessary details to reduce complexity and focus on essential features only is abstraction.\nFor example, When making coffee, we only care about providing coffee, water, milk etc to the coffee machine\nand don’t care about how the machine prepares the specified type of coffee.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> Coffee <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>coffeeType <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> CoffeeMachine <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\twaterQuantity  <span class=\"token builtin\">int</span>\n\tmilkQuantity   <span class=\"token builtin\">int</span>\n\tcoffeeQuantity <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CoffeeMachine<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>coffeeType <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's your coffee.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetCoffee</span><span class=\"token punctuation\">(</span>v Coffee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tv<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Espresso\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmachine <span class=\"token operator\">:=</span> CoffeeMachine<span class=\"token punctuation\">{</span>waterQuantity<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> milkQuantity<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> coffeeQuantity<span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">GetCoffee</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>machine<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, CoffeMachine struct implements Coffee interface and GetCoffee function only needs to know that it can get\ncoffee and not how coffee is prepared.</p>\n<h4>Inheritance</h4>\n<p>Composition or struct embedding can be used to emulate inheritance in go.</p>\n<p>If a struct includes another struct as an anonymous field then it’s struct embedding. The embedded struct\nis flattened into the outer struct, and it’s not possible to distinguish between fields and methods that belong\nto the outer struct and those that belong to the embedded struct.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> Parent <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tName <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Parent<span class=\"token punctuation\">)</span> <span class=\"token function\">PrintName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Child <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tParent <span class=\"token comment\">// struct embedding</span>\n\tAge    <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Child<span class=\"token punctuation\">{</span>Parent<span class=\"token punctuation\">{</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">PrintName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"John\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>On the other hand, if a struct includes a field that references another struct, then it’s a composition.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> Animal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tName <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Animal<span class=\"token punctuation\">)</span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"says hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Dog <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tan Animal\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Dog<span class=\"token punctuation\">)</span> <span class=\"token function\">WagsTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>an<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wags tail\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\td <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Dog<span class=\"token punctuation\">{</span>Animal<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kuro\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\td<span class=\"token punctuation\">.</span>an<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Kuro says hello</span>\n\td<span class=\"token punctuation\">.</span><span class=\"token function\">WagsTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Kuro wags tail</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Polymorphism</h4>\n<p>Polymorphism is the ability of an object to take on multiple forms. In object-oriented programming,\nit refers to the ability of a single function or method to operate on multiple types of data. This allows\nfor more generic and reusable code, as well as more flexible and extensible systems.</p>\n<p>In Go, polymorphism is achieved through interfaces. An interface is a type that defines a set of methods.\nAny struct that implements those methods is said to implement the interface, and can be treated as an instance\nof the interface type.</p>\n<p>Here’s an example of how to define an interface and have different structs implement it:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"math\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Shape <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Rectangle <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tWidth<span class=\"token punctuation\">,</span> Height <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r Rectangle<span class=\"token punctuation\">)</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>Width <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>Height\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Circle <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tRadius <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Circle<span class=\"token punctuation\">)</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span>Pi <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>Radius <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>Radius\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> s Shape <span class=\"token operator\">=</span> Rectangle<span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"50\"</span>\n\ts <span class=\"token operator\">=</span> Circle<span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"314.1592653589793\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example, the Shape interface defines an Area() method. The Rectangle and Circle structs each implement\nthis method in their own way, but both can be assigned to the variable s of type Shape, because both structs implements\nthe Area() method which is defined in the Shape interface. This is polymorphism in action, where one function\n(in this case the Area() method) can operate on multiple types of data (in this case the Rectangle and Circle structs).</p>\n<p>Another way to achieve polymorphism is to use a function that takes an interface as an argument, and can operate on any\nstruct that implements that interface. Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span>s Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr <span class=\"token operator\">:=</span> Rectangle<span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n\tc <span class=\"token operator\">:=</span> Circle<span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"50\"</span>\n\t<span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"314.1592653589793\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"From OOP to Go","date":"January 29, 2023","description":"Understand Go from OOP perspective"}},"previous":{"fields":{"slug":"/learn-docker/"},"frontmatter":{"title":"Learn Docker"}},"next":{"fields":{"slug":"/protected-routes-in-nextjs/"},"frontmatter":{"title":"Protected routes in next.js"}}},"pageContext":{"id":"4280fd07-230d-5c5f-a118-75bee4d8fe62","previousPostId":"dc70255b-b139-5bd0-b561-a224e7e58f74","nextPostId":"59eb8968-26d2-5b1b-9f2f-adf838e07260"}},"staticQueryHashes":["230163734","3589320610","754622331"]}